import{_ as o,C as p,c as d,o as r,j as e,a as l,aA as a,G as t,w as n}from"./chunks/framework.DFeQt755.js";const X=JSON.parse('{"title":"List of JustPIC functions","description":"","frontmatter":{},"headers":[],"relativePath":"man/JustPIC.md","filePath":"man/JustPIC.md","lastUpdated":null}'),c={name:"man/JustPIC.md"},h={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},N={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},I={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},J={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},V={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},L={class:"jldocstring custom-block",open:""},R={class:"jldocstring custom-block",open:""},U={class:"jldocstring custom-block",open:""},G={class:"jldocstring custom-block",open:""},O={class:"jldocstring custom-block",open:""};function z(K,i,Q,$,H,q){const s=p("Badge");return r(),d("div",null,[i[128]||(i[128]=e("h1",{id:"List-of-JustPIC-functions",tabindex:"-1"},[l("List of JustPIC functions "),e("a",{class:"header-anchor",href:"#List-of-JustPIC-functions","aria-label":'Permalink to "List of JustPIC functions {#List-of-JustPIC-functions}"'},"â€‹")],-1)),i[129]||(i[129]=e("p",null,[l("Here an overview of all functions in JustPIC.jl, , for a complete list see "),e("a",{href:"https://juliageodynamics.github.io/JustPIC.jl/dev/",target:"_blank",rel:"noreferrer"},"here"),l(":")],-1)),e("details",h,[e("summary",null,[i[0]||(i[0]=e("a",{id:"JustPIC.Particles",href:"#JustPIC.Particles"},[e("span",{class:"jlbinding"},"JustPIC.Particles")],-1)),i[1]||(i[1]=l()),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[3]||(i[3]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Particles{Backend,N,I,T1,T2} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractParticles</span></span></code></pre></div><p>A struct representing a collection of particles.</p><p><strong>Arguments</strong></p><ul><li><p><code>backend</code>: The backend used for particle computations (CPUBackend, CUDABackend, AMDGPUBackend).</p></li><li><p><code>coords</code>: Coordinates of the particles</p></li><li><p><code>index</code>: Helper array flaggin active particles</p></li><li><p><code>nxcell</code>: Initial number of particles per cell</p></li><li><p><code>max_xcell</code>: Maximum number of particles per cell</p></li><li><p><code>min_xcell</code>: Minimum number of particles per cell</p></li><li><p><code>np</code>: Number of particles</p></li></ul>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[2]||(i[2]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/particles.jl#L3-L16",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",k,[e("summary",null,[i[4]||(i[4]=e("a",{id:"JustPIC.nphases-Tuple{JustPIC.PhaseRatios}",href:"#JustPIC.nphases-Tuple{JustPIC.PhaseRatios}"},[e("span",{class:"jlbinding"},"JustPIC.nphases")],-1)),i[5]||(i[5]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[7]||(i[7]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nphases</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PhaseRatios</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return the number of phases in <code>x::PhaseRatios</code>.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[6]||(i[6]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/PhaseRatios/PhaseRatios.jl#L22-L26",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",u,[e("summary",null,[i[8]||(i[8]=e("a",{id:"JustPIC._2D.advection!-Union{Tuple{T}, Tuple{N}, Tuple{Particles, AbstractAdvectionIntegrator, Any, NTuple{N, NTuple{N, T}}, Any}} where {N, T}",href:"#JustPIC._2D.advection!-Union{Tuple{T}, Tuple{N}, Tuple{Particles, AbstractAdvectionIntegrator, Any, NTuple{N, NTuple{N, T}}, Any}} where {N, T}"},[e("span",{class:"jlbinding"},"JustPIC._2D.advection!")],-1)),i[9]||(i[9]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[11]||(i[11]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">advection!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(particles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Particles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractAdvectionIntegrator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, V, grid_vi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N,NTuple{N,T}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dt)</span></span></code></pre></div><p>Advects the particles using the advection scheme defined by <code>method</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>particles</code>: Particles object to be advected.</p></li><li><p><code>method</code>: Time integration method (<code>Euler</code> or <code>RungeKutta2</code>).</p></li><li><p><code>V</code>: Tuple containing <code>Vx</code>, <code>Vy</code>; and <code>Vz</code> in 3D.</p></li><li><p><code>grid_vi</code>: Tuple containing the grids corresponding to <code>Vx</code>, <code>Vy</code>; and <code>Vz</code> in 3D.</p></li><li><p><code>dt</code>: Time step.</p></li></ul>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[10]||(i[10]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/Particles/Advection/advection.jl#L2-L13",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",g,[e("summary",null,[i[12]||(i[12]=e("a",{id:"JustPIC._2D.advection_LinP!-Union{Tuple{N}, Tuple{Particles, AbstractAdvectionIntegrator, Any, NTuple{N, NTuple{N, T} where T}, Any}} where N",href:"#JustPIC._2D.advection_LinP!-Union{Tuple{N}, Tuple{Particles, AbstractAdvectionIntegrator, Any, NTuple{N, NTuple{N, T} where T}, Any}} where N"},[e("span",{class:"jlbinding"},"JustPIC._2D.advection_LinP!")],-1)),i[13]||(i[13]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[15]||(i[15]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">advection!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(particles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Particles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractAdvectionIntegrator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, V, grid_vi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N,NTuple{N,T}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dt)</span></span></code></pre></div><p>Advects the particles using the advection scheme defined by <code>method</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>particles</code>: Particles object to be advected.</p></li><li><p><code>method</code>: Time integration method (<code>Euler</code> or <code>RungeKutta2</code>).</p></li><li><p><code>V</code>: Tuple containing <code>Vx</code>, <code>Vy</code>; and <code>Vz</code> in 3D.</p></li><li><p><code>grid_vi</code>: Tuple containing the grids corresponding to <code>Vx</code>, <code>Vy</code>; and <code>Vz</code> in 3D.</p></li><li><p><code>dt</code>: Time step.</p></li></ul>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[14]||(i[14]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/Particles/Advection/advection_LinP.jl#L2-L13",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",y,[e("summary",null,[i[16]||(i[16]=e("a",{id:"JustPIC._2D.advection_MQS!-Union{Tuple{N}, Tuple{Particles, AbstractAdvectionIntegrator, Any, NTuple{N, NTuple{N, T} where T}, Any}} where N",href:"#JustPIC._2D.advection_MQS!-Union{Tuple{N}, Tuple{Particles, AbstractAdvectionIntegrator, Any, NTuple{N, NTuple{N, T} where T}, Any}} where N"},[e("span",{class:"jlbinding"},"JustPIC._2D.advection_MQS!")],-1)),i[17]||(i[17]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[19]||(i[19]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">advection!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(particles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Particles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractAdvectionIntegrator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, V, grid_vi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N,NTuple{N,T}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dt)</span></span></code></pre></div><p>Advects the particles using the advection scheme defined by <code>method</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>particles</code>: Particles object to be advected.</p></li><li><p><code>method</code>: Time integration method (<code>Euler</code> or <code>RungeKutta2</code>).</p></li><li><p><code>V</code>: Tuple containing <code>Vx</code>, <code>Vy</code>; and <code>Vz</code> in 3D.</p></li><li><p><code>grid_vi</code>: Tuple containing the grids corresponding to <code>Vx</code>, <code>Vy</code>; and <code>Vz</code> in 3D.</p></li><li><p><code>dt</code>: Time step.</p></li></ul>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[18]||(i[18]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/Particles/Advection/advection_MQS.jl#L2-L13",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",T,[e("summary",null,[i[20]||(i[20]=e("a",{id:"JustPIC._2D.centroid2particle!-NTuple{4, Any}",href:"#JustPIC._2D.centroid2particle!-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"JustPIC._2D.centroid2particle!")],-1)),i[21]||(i[21]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[23]||(i[23]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">centroid2particle!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Fp, xci, F, particles)</span></span></code></pre></div><p>Interpolates properties <code>F</code> that are defined on a mesh at center points with location <code>xci</code> to particles <code>Fp</code>.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[22]||(i[22]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/Interpolations/centroid_to_particle.jl#L4-L8",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",_,[e("summary",null,[i[24]||(i[24]=e("a",{id:"JustPIC._2D.checkpointing_particles-Tuple{Any, Any, String}",href:"#JustPIC._2D.checkpointing_particles-Tuple{Any, Any, String}"},[e("span",{class:"jlbinding"},"JustPIC._2D.checkpointing_particles")],-1)),i[25]||(i[25]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[27]||(i[27]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">checkpointing_particles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dst, particles;phases</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, phase_ratios</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, chain</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, particle_args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Save the state of particles and related data to a checkpoint file in a jld2 format. The name of the checkpoint file is <code>particles_checkpoint.jld2</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>dst</code>: The destination directory where the checkpoint file will be saved.</p></li><li><p><code>particles</code>: The array of particles to be saved.</p></li></ul><p><strong>Keyword Arguments</strong></p><ul><li><p><code>phases</code>: The array of phases associated with the particles. If nothing is stated, the default is <code>nothing</code>.</p></li><li><p><code>phase_ratios</code>: The array of phase ratios. If nothing is stated, the default is <code>nothing</code>.</p></li><li><p><code>chain</code>: The chain data to be saved. If nothing is stated, the default is <code>nothing</code>.</p></li><li><p><code>t</code>: The current time to be saved. If nothing is stated, the default is <code>nothing</code>.</p></li><li><p><code>dt</code>: The timestep to be saved. If nothing is stated, the default is <code>nothing</code>.</p></li><li><p><code>particle_args</code>: Additional particle arguments to be saved. If nothing is stated, the default is <code>nothing</code>.</p></li></ul>',6)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[26]||(i[26]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/IO/JLD2.jl#L58-L75",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",b,[e("summary",null,[i[28]||(i[28]=e("a",{id:"JustPIC._2D.fill_chain_from_chain!-Tuple{MarkerChain, Any, Any}",href:"#JustPIC._2D.fill_chain_from_chain!-Tuple{MarkerChain, Any, Any}"},[e("span",{class:"jlbinding"},"JustPIC._2D.fill_chain_from_chain!")],-1)),i[29]||(i[29]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[31]||(i[31]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fill_chain!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chain</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MarkerChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, topo_x, topo_y)</span></span></code></pre></div><p>Fill the given <code>chain</code> of markers with topographical data.</p><p><strong>Arguments</strong></p><ul><li><p><code>chain::MarkerChain</code>: The chain of markers to be filled.</p></li><li><p><code>topo_x</code>: The x-coordinates of the topography.</p></li><li><p><code>topo_y</code>: The y-coordinates of the topography.</p></li></ul><p><strong>Description</strong></p><p>This function populates the <code>chain</code> with markers based on the provided topographical data (<code>topo_x</code> and <code>topo_y</code>). The function modifies the <code>chain</code> in place.</p>',6)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[30]||(i[30]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/MarkerChain/init.jl#L54-L66",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",C,[e("summary",null,[i[32]||(i[32]=e("a",{id:"JustPIC._2D.force_injection!-Union{Tuple{Backend}, Tuple{Particles{Backend}, Any}} where Backend",href:"#JustPIC._2D.force_injection!-Union{Tuple{Backend}, Tuple{Particles{Backend}, Any}} where Backend"},[e("span",{class:"jlbinding"},"JustPIC._2D.force_injection!")],-1)),i[33]||(i[33]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[35]||(i[35]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">force_injection!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(particles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Particles{Backend}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p_new) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Backend}</span></span></code></pre></div><p>Forces the injection of new particles into the existing <code>particles</code> collection. This function modifies the <code>particles</code> in place by adding the new particles specified in <code>p_new</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>particles::Particles{Backend}</code>: The existing collection of particles to which new particles will be added. The type of backend is specified by the <code>Backend</code> parameter.</p></li><li><p><code>p_new</code>: The new particles to be injected into the existing collection.</p></li></ul>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[34]||(i[34]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/Particles/forced_injection.jl#L22-L30",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",E,[e("summary",null,[i[36]||(i[36]=e("a",{id:"JustPIC._2D.force_injection!-Union{Tuple{N}, Tuple{Backend}, Tuple{Particles{Backend}, Any, NTuple{N, Any}, NTuple{N, Any}}} where {Backend, N}",href:"#JustPIC._2D.force_injection!-Union{Tuple{N}, Tuple{Backend}, Tuple{Particles{Backend}, Any, NTuple{N, Any}, NTuple{N, Any}}} where {Backend, N}"},[e("span",{class:"jlbinding"},"JustPIC._2D.force_injection!")],-1)),i[37]||(i[37]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[39]||(i[39]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">force_injection!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(particles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Particles{Backend}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p_new, fields</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N, Any}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, values</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N, Any}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Backend, N}</span></span></code></pre></div><p>Forcefully injects new particles into the <code>particles</code> object. This function modifies the <code>particles</code> object in place.</p><p><strong>Arguments</strong></p><ul><li><p><code>particles::Particles{Backend}</code>: The particles object to be modified.</p></li><li><p><code>p_new</code>: The new particles to be injected.</p></li><li><p><code>fields::NTuple{N, Any}</code>: A tuple containing the fields to be updated.</p></li><li><p><code>values::NTuple{N, Any}</code>: A tuple containing the values corresponding to the fields.</p></li></ul><p><strong>Returns</strong></p><ul><li>Nothing. This function modifies the <code>particles</code> object in place.</li></ul>',6)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[38]||(i[38]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/Particles/forced_injection.jl#L1-L14",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",m,[e("summary",null,[i[40]||(i[40]=e("a",{id:"JustPIC._2D.init_particles-Union{Tuple{T}, Tuple{N}, Tuple{Any, Any, Any, Any, Vararg{N, T}}} where {N, T}",href:"#JustPIC._2D.init_particles-Union{Tuple{T}, Tuple{N}, Tuple{Any, Any, Any, Any, Vararg{N, T}}} where {N, T}"},[e("span",{class:"jlbinding"},"JustPIC._2D.init_particles")],-1)),i[41]||(i[41]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[43]||(i[43]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">init_particles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( backend, nxcell, max_xcell, min_xcell, coords</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N,AbstractArray}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dxáµ¢</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N,T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, náµ¢</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N,I}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Initialize the particles object.</p><p><strong>Arguments</strong></p><ul><li><p><code>backend</code>: Device backend</p></li><li><p><code>nxcell</code>: Initial number of particles per cell</p></li><li><p><code>max_xcell</code>: Maximum number of particles per cell</p></li><li><p><code>min_xcell</code>: Minimum number of particles per cell</p></li><li><p><code>xvi</code>: Grid cells vertices</p></li></ul>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[42]||(i[42]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/Particles/particles_utils.jl#L17-L28",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",f,[e("summary",null,[i[44]||(i[44]=e("a",{id:"JustPIC._2D.inject_particles!-Union{Tuple{N}, Tuple{Particles, Any, NTuple{N, T} where T}} where N",href:"#JustPIC._2D.inject_particles!-Union{Tuple{N}, Tuple{Particles, Any, NTuple{N, T} where T}} where N"},[e("span",{class:"jlbinding"},"JustPIC._2D.inject_particles!")],-1)),i[45]||(i[45]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[47]||(i[47]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inject_particles!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(particles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Particles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args, grid)</span></span></code></pre></div><p>Injects particles if the number of particles in a given cell is such that <code>n &lt; particles.min_xcell</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>particles</code>: The particles object.</p></li><li><p><code>args</code>: <code>CellArrays</code>s containing particle fields.</p></li><li><p><code>grid</code>: The grid cell vertices.</p></li></ul>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[46]||(i[46]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/Particles/injection.jl#L3-L12",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",A,[e("summary",null,[i[48]||(i[48]=e("a",{id:"JustPIC._2D.interpolate_velocity_to_markerchain!-Union{Tuple{T}, Tuple{N}, Tuple{MarkerChain, Any, Any, NTuple{N, NTuple{N, T}}}} where {N, T}",href:"#JustPIC._2D.interpolate_velocity_to_markerchain!-Union{Tuple{T}, Tuple{N}, Tuple{MarkerChain, Any, Any, NTuple{N, NTuple{N, T}}}} where {N, T}"},[e("span",{class:"jlbinding"},"JustPIC._2D.interpolate_velocity_to_markerchain!")],-1)),i[49]||(i[49]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[51]||(i[51]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">interpolate_velocity_to_markerchain!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chain</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MarkerChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, chain_V</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N, CellArray}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, V, grid_vi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N, NTuple{N, T}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {N, T}</span></span></code></pre></div><p>Interpolates the velocity field to the positions of the marker chain.</p><p><strong>Arguments</strong></p><ul><li><p><code>chain::MarkerChain</code>: The marker chain object containing the particle coordinates and indices.</p></li><li><p><code>chain_V::NTuple{N, CellArray}</code>: The output velocity field at the marker chain positions.</p></li><li><p><code>V</code>: The velocity field to be interpolated.</p></li><li><p><code>grid_vi::NTuple{N, NTuple{N, T}}</code>: The grid information for each dimension.</p></li></ul>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[50]||(i[50]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/MarkerChain/Advection/interp_velocity.jl#L1-L11",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",v,[e("summary",null,[i[52]||(i[52]=e("a",{id:"JustPIC._2D.lerp-Union{Tuple{T}, Tuple{nD}, Tuple{Any, NTuple{nD, T}}} where {nD, T}",href:"#JustPIC._2D.lerp-Union{Tuple{T}, Tuple{nD}, Tuple{Any, NTuple{nD, T}}} where {nD, T}"},[e("span",{class:"jlbinding"},"JustPIC._2D.lerp")],-1)),i[53]||(i[53]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[55]||(i[55]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lerp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v, t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{nD,T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {nD,T}</span></span></code></pre></div><p>Linearly interpolates the value <code>v</code> between the elements of the tuple <code>t</code>. This function is specialized for tuples of length <code>nD</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>v</code>: The value to be interpolated.</p></li><li><p><code>t</code>: The tuple of values to interpolate between.</p></li></ul>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[54]||(i[54]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/Interpolations/ndlerp.jl#L1-L10",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",j,[e("summary",null,[i[56]||(i[56]=e("a",{id:"JustPIC._2D.move_particles!-Union{Tuple{N}, Tuple{AbstractParticles, NTuple{N, T} where T, Any}} where N",href:"#JustPIC._2D.move_particles!-Union{Tuple{N}, Tuple{AbstractParticles, NTuple{N, T} where T, Any}} where N"},[e("span",{class:"jlbinding"},"JustPIC._2D.move_particles!")],-1)),i[57]||(i[57]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[59]||(i[59]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">move_particles!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(particles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractParticles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, grid, args)</span></span></code></pre></div><p>Move particles in the given <code>particles</code> container according to the provided <code>grid</code> and particles fields in <code>args</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>particles</code>: The container of particles to be moved.</p></li><li><p><code>grid</code>: The grid used for particle movement.</p></li><li><p><code>args</code>: <code>CellArrays</code>s containing particle fields.</p></li></ul>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[58]||(i[58]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/Particles/move_safe.jl#L1-L10",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",N,[e("summary",null,[i[60]||(i[60]=e("a",{id:"JustPIC._2D.particle2centroid!-Tuple{Any, Any, NTuple{N, T} where {N, T}, Particles}",href:"#JustPIC._2D.particle2centroid!-Tuple{Any, Any, NTuple{N, T} where {N, T}, Particles}"},[e("span",{class:"jlbinding"},"JustPIC._2D.particle2centroid!")],-1)),i[61]||(i[61]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[63]||(i[63]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">particle2centroid!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(F, Fp, xci</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, particles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Particles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Interpolates properties <code>Fp</code> from particles to the grid <code>F</code> at center points that are defined by 1D coordinate arrays in <code>xci</code></p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[62]||(i[62]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/Interpolations/particle_to_grid_centroid.jl#L2-L6",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",P,[e("summary",null,[i[64]||(i[64]=e("a",{id:"JustPIC._2D.@idx-Tuple",href:"#JustPIC._2D.@idx-Tuple"},[e("span",{class:"jlbinding"},"JustPIC._2D.@idx")],-1)),i[65]||(i[65]=l()),t(s,{type:"info",class:"jlObjectType jlMacro",text:"Macro"})]),i[67]||(i[67]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@idx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Make a linear range from <code>1</code> to <code>args[i]</code>, with <code>i âˆˆ [1, ..., n]</code></p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[66]||(i[66]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/Utils.jl#L18-L22",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",F,[e("summary",null,[i[68]||(i[68]=e("a",{id:"JustPIC._3D.advection!-Union{Tuple{T}, Tuple{N}, Tuple{Particles, AbstractAdvectionIntegrator, Any, NTuple{N, NTuple{N, T}}, Any}} where {N, T}",href:"#JustPIC._3D.advection!-Union{Tuple{T}, Tuple{N}, Tuple{Particles, AbstractAdvectionIntegrator, Any, NTuple{N, NTuple{N, T}}, Any}} where {N, T}"},[e("span",{class:"jlbinding"},"JustPIC._3D.advection!")],-1)),i[69]||(i[69]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[71]||(i[71]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">advection!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(particles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Particles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractAdvectionIntegrator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, V, grid_vi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N,NTuple{N,T}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dt)</span></span></code></pre></div><p>Advects the particles using the advection scheme defined by <code>method</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>particles</code>: Particles object to be advected.</p></li><li><p><code>method</code>: Time integration method (<code>Euler</code> or <code>RungeKutta2</code>).</p></li><li><p><code>V</code>: Tuple containing <code>Vx</code>, <code>Vy</code>; and <code>Vz</code> in 3D.</p></li><li><p><code>grid_vi</code>: Tuple containing the grids corresponding to <code>Vx</code>, <code>Vy</code>; and <code>Vz</code> in 3D.</p></li><li><p><code>dt</code>: Time step.</p></li></ul>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[70]||(i[70]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/Particles/Advection/advection.jl#L2-L13",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",I,[e("summary",null,[i[72]||(i[72]=e("a",{id:"JustPIC._3D.advection_LinP!-Union{Tuple{N}, Tuple{Particles, AbstractAdvectionIntegrator, Any, NTuple{N, NTuple{N, T} where T}, Any}} where N",href:"#JustPIC._3D.advection_LinP!-Union{Tuple{N}, Tuple{Particles, AbstractAdvectionIntegrator, Any, NTuple{N, NTuple{N, T} where T}, Any}} where N"},[e("span",{class:"jlbinding"},"JustPIC._3D.advection_LinP!")],-1)),i[73]||(i[73]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[75]||(i[75]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">advection!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(particles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Particles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractAdvectionIntegrator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, V, grid_vi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N,NTuple{N,T}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dt)</span></span></code></pre></div><p>Advects the particles using the advection scheme defined by <code>method</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>particles</code>: Particles object to be advected.</p></li><li><p><code>method</code>: Time integration method (<code>Euler</code> or <code>RungeKutta2</code>).</p></li><li><p><code>V</code>: Tuple containing <code>Vx</code>, <code>Vy</code>; and <code>Vz</code> in 3D.</p></li><li><p><code>grid_vi</code>: Tuple containing the grids corresponding to <code>Vx</code>, <code>Vy</code>; and <code>Vz</code> in 3D.</p></li><li><p><code>dt</code>: Time step.</p></li></ul>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[74]||(i[74]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/Particles/Advection/advection_LinP.jl#L2-L13",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",D,[e("summary",null,[i[76]||(i[76]=e("a",{id:"JustPIC._3D.advection_MQS!-Union{Tuple{N}, Tuple{Particles, AbstractAdvectionIntegrator, Any, NTuple{N, NTuple{N, T} where T}, Any}} where N",href:"#JustPIC._3D.advection_MQS!-Union{Tuple{N}, Tuple{Particles, AbstractAdvectionIntegrator, Any, NTuple{N, NTuple{N, T} where T}, Any}} where N"},[e("span",{class:"jlbinding"},"JustPIC._3D.advection_MQS!")],-1)),i[77]||(i[77]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[79]||(i[79]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">advection!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(particles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Particles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractAdvectionIntegrator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, V, grid_vi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N,NTuple{N,T}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dt)</span></span></code></pre></div><p>Advects the particles using the advection scheme defined by <code>method</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>particles</code>: Particles object to be advected.</p></li><li><p><code>method</code>: Time integration method (<code>Euler</code> or <code>RungeKutta2</code>).</p></li><li><p><code>V</code>: Tuple containing <code>Vx</code>, <code>Vy</code>; and <code>Vz</code> in 3D.</p></li><li><p><code>grid_vi</code>: Tuple containing the grids corresponding to <code>Vx</code>, <code>Vy</code>; and <code>Vz</code> in 3D.</p></li><li><p><code>dt</code>: Time step.</p></li></ul>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[78]||(i[78]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/Particles/Advection/advection_MQS.jl#L2-L13",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",J,[e("summary",null,[i[80]||(i[80]=e("a",{id:"JustPIC._3D.centroid2particle!-NTuple{4, Any}",href:"#JustPIC._3D.centroid2particle!-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"JustPIC._3D.centroid2particle!")],-1)),i[81]||(i[81]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[83]||(i[83]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">centroid2particle!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Fp, xci, F, particles)</span></span></code></pre></div><p>Interpolates properties <code>F</code> that are defined on a mesh at center points with location <code>xci</code> to particles <code>Fp</code>.</p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[82]||(i[82]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/Interpolations/centroid_to_particle.jl#L4-L8",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",x,[e("summary",null,[i[84]||(i[84]=e("a",{id:"JustPIC._3D.checkpointing_particles-Tuple{Any, Any, String}",href:"#JustPIC._3D.checkpointing_particles-Tuple{Any, Any, String}"},[e("span",{class:"jlbinding"},"JustPIC._3D.checkpointing_particles")],-1)),i[85]||(i[85]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[87]||(i[87]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">checkpointing_particles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dst, particles;phases</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, phase_ratios</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, chain</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, particle_args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Save the state of particles and related data to a checkpoint file in a jld2 format. The name of the checkpoint file is <code>particles_checkpoint.jld2</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>dst</code>: The destination directory where the checkpoint file will be saved.</p></li><li><p><code>particles</code>: The array of particles to be saved.</p></li></ul><p><strong>Keyword Arguments</strong></p><ul><li><p><code>phases</code>: The array of phases associated with the particles. If nothing is stated, the default is <code>nothing</code>.</p></li><li><p><code>phase_ratios</code>: The array of phase ratios. If nothing is stated, the default is <code>nothing</code>.</p></li><li><p><code>chain</code>: The chain data to be saved. If nothing is stated, the default is <code>nothing</code>.</p></li><li><p><code>t</code>: The current time to be saved. If nothing is stated, the default is <code>nothing</code>.</p></li><li><p><code>dt</code>: The timestep to be saved. If nothing is stated, the default is <code>nothing</code>.</p></li><li><p><code>particle_args</code>: Additional particle arguments to be saved. If nothing is stated, the default is <code>nothing</code>.</p></li></ul>',6)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[86]||(i[86]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/IO/JLD2.jl#L58-L75",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",B,[e("summary",null,[i[88]||(i[88]=e("a",{id:"JustPIC._3D.fill_chain_from_chain!-Tuple{MarkerChain, Any, Any}",href:"#JustPIC._3D.fill_chain_from_chain!-Tuple{MarkerChain, Any, Any}"},[e("span",{class:"jlbinding"},"JustPIC._3D.fill_chain_from_chain!")],-1)),i[89]||(i[89]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[91]||(i[91]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fill_chain!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chain</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MarkerChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, topo_x, topo_y)</span></span></code></pre></div><p>Fill the given <code>chain</code> of markers with topographical data.</p><p><strong>Arguments</strong></p><ul><li><p><code>chain::MarkerChain</code>: The chain of markers to be filled.</p></li><li><p><code>topo_x</code>: The x-coordinates of the topography.</p></li><li><p><code>topo_y</code>: The y-coordinates of the topography.</p></li></ul><p><strong>Description</strong></p><p>This function populates the <code>chain</code> with markers based on the provided topographical data (<code>topo_x</code> and <code>topo_y</code>). The function modifies the <code>chain</code> in place.</p>',6)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[90]||(i[90]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/MarkerChain/init.jl#L54-L66",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",V,[e("summary",null,[i[92]||(i[92]=e("a",{id:"JustPIC._3D.force_injection!-Union{Tuple{Backend}, Tuple{Particles{Backend}, Any}} where Backend",href:"#JustPIC._3D.force_injection!-Union{Tuple{Backend}, Tuple{Particles{Backend}, Any}} where Backend"},[e("span",{class:"jlbinding"},"JustPIC._3D.force_injection!")],-1)),i[93]||(i[93]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[95]||(i[95]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">force_injection!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(particles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Particles{Backend}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p_new) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Backend}</span></span></code></pre></div><p>Forces the injection of new particles into the existing <code>particles</code> collection. This function modifies the <code>particles</code> in place by adding the new particles specified in <code>p_new</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>particles::Particles{Backend}</code>: The existing collection of particles to which new particles will be added. The type of backend is specified by the <code>Backend</code> parameter.</p></li><li><p><code>p_new</code>: The new particles to be injected into the existing collection.</p></li></ul>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[94]||(i[94]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/Particles/forced_injection.jl#L22-L30",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",w,[e("summary",null,[i[96]||(i[96]=e("a",{id:"JustPIC._3D.force_injection!-Union{Tuple{N}, Tuple{Backend}, Tuple{Particles{Backend}, Any, NTuple{N, Any}, NTuple{N, Any}}} where {Backend, N}",href:"#JustPIC._3D.force_injection!-Union{Tuple{N}, Tuple{Backend}, Tuple{Particles{Backend}, Any, NTuple{N, Any}, NTuple{N, Any}}} where {Backend, N}"},[e("span",{class:"jlbinding"},"JustPIC._3D.force_injection!")],-1)),i[97]||(i[97]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[99]||(i[99]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">force_injection!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(particles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Particles{Backend}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p_new, fields</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N, Any}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, values</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N, Any}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Backend, N}</span></span></code></pre></div><p>Forcefully injects new particles into the <code>particles</code> object. This function modifies the <code>particles</code> object in place.</p><p><strong>Arguments</strong></p><ul><li><p><code>particles::Particles{Backend}</code>: The particles object to be modified.</p></li><li><p><code>p_new</code>: The new particles to be injected.</p></li><li><p><code>fields::NTuple{N, Any}</code>: A tuple containing the fields to be updated.</p></li><li><p><code>values::NTuple{N, Any}</code>: A tuple containing the values corresponding to the fields.</p></li></ul><p><strong>Returns</strong></p><ul><li>Nothing. This function modifies the <code>particles</code> object in place.</li></ul>',6)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[98]||(i[98]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/Particles/forced_injection.jl#L1-L14",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",S,[e("summary",null,[i[100]||(i[100]=e("a",{id:"JustPIC._3D.init_particles-Union{Tuple{T}, Tuple{N}, Tuple{Any, Any, Any, Any, Vararg{N, T}}} where {N, T}",href:"#JustPIC._3D.init_particles-Union{Tuple{T}, Tuple{N}, Tuple{Any, Any, Any, Any, Vararg{N, T}}} where {N, T}"},[e("span",{class:"jlbinding"},"JustPIC._3D.init_particles")],-1)),i[101]||(i[101]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[103]||(i[103]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">init_particles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( backend, nxcell, max_xcell, min_xcell, coords</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N,AbstractArray}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dxáµ¢</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N,T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, náµ¢</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N,I}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Initialize the particles object.</p><p><strong>Arguments</strong></p><ul><li><p><code>backend</code>: Device backend</p></li><li><p><code>nxcell</code>: Initial number of particles per cell</p></li><li><p><code>max_xcell</code>: Maximum number of particles per cell</p></li><li><p><code>min_xcell</code>: Minimum number of particles per cell</p></li><li><p><code>xvi</code>: Grid cells vertices</p></li></ul>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[102]||(i[102]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/Particles/particles_utils.jl#L17-L28",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",M,[e("summary",null,[i[104]||(i[104]=e("a",{id:"JustPIC._3D.inject_particles!-Union{Tuple{N}, Tuple{Particles, Any, NTuple{N, T} where T}} where N",href:"#JustPIC._3D.inject_particles!-Union{Tuple{N}, Tuple{Particles, Any, NTuple{N, T} where T}} where N"},[e("span",{class:"jlbinding"},"JustPIC._3D.inject_particles!")],-1)),i[105]||(i[105]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[107]||(i[107]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inject_particles!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(particles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Particles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args, grid)</span></span></code></pre></div><p>Injects particles if the number of particles in a given cell is such that <code>n &lt; particles.min_xcell</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>particles</code>: The particles object.</p></li><li><p><code>args</code>: <code>CellArrays</code>s containing particle fields.</p></li><li><p><code>grid</code>: The grid cell vertices.</p></li></ul>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[106]||(i[106]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/Particles/injection.jl#L3-L12",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",L,[e("summary",null,[i[108]||(i[108]=e("a",{id:"JustPIC._3D.interpolate_velocity_to_markerchain!-Union{Tuple{T}, Tuple{N}, Tuple{MarkerChain, Any, Any, NTuple{N, NTuple{N, T}}}} where {N, T}",href:"#JustPIC._3D.interpolate_velocity_to_markerchain!-Union{Tuple{T}, Tuple{N}, Tuple{MarkerChain, Any, Any, NTuple{N, NTuple{N, T}}}} where {N, T}"},[e("span",{class:"jlbinding"},"JustPIC._3D.interpolate_velocity_to_markerchain!")],-1)),i[109]||(i[109]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[111]||(i[111]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">interpolate_velocity_to_markerchain!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chain</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MarkerChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, chain_V</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N, CellArray}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, V, grid_vi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N, NTuple{N, T}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {N, T}</span></span></code></pre></div><p>Interpolates the velocity field to the positions of the marker chain.</p><p><strong>Arguments</strong></p><ul><li><p><code>chain::MarkerChain</code>: The marker chain object containing the particle coordinates and indices.</p></li><li><p><code>chain_V::NTuple{N, CellArray}</code>: The output velocity field at the marker chain positions.</p></li><li><p><code>V</code>: The velocity field to be interpolated.</p></li><li><p><code>grid_vi::NTuple{N, NTuple{N, T}}</code>: The grid information for each dimension.</p></li></ul>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[110]||(i[110]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/MarkerChain/Advection/interp_velocity.jl#L1-L11",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",R,[e("summary",null,[i[112]||(i[112]=e("a",{id:"JustPIC._3D.lerp-Union{Tuple{T}, Tuple{nD}, Tuple{Any, NTuple{nD, T}}} where {nD, T}",href:"#JustPIC._3D.lerp-Union{Tuple{T}, Tuple{nD}, Tuple{Any, NTuple{nD, T}}} where {nD, T}"},[e("span",{class:"jlbinding"},"JustPIC._3D.lerp")],-1)),i[113]||(i[113]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[115]||(i[115]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lerp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v, t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{nD,T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {nD,T}</span></span></code></pre></div><p>Linearly interpolates the value <code>v</code> between the elements of the tuple <code>t</code>. This function is specialized for tuples of length <code>nD</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>v</code>: The value to be interpolated.</p></li><li><p><code>t</code>: The tuple of values to interpolate between.</p></li></ul>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[114]||(i[114]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/Interpolations/ndlerp.jl#L1-L10",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",U,[e("summary",null,[i[116]||(i[116]=e("a",{id:"JustPIC._3D.move_particles!-Union{Tuple{N}, Tuple{AbstractParticles, NTuple{N, T} where T, Any}} where N",href:"#JustPIC._3D.move_particles!-Union{Tuple{N}, Tuple{AbstractParticles, NTuple{N, T} where T, Any}} where N"},[e("span",{class:"jlbinding"},"JustPIC._3D.move_particles!")],-1)),i[117]||(i[117]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[119]||(i[119]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">move_particles!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(particles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractParticles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, grid, args)</span></span></code></pre></div><p>Move particles in the given <code>particles</code> container according to the provided <code>grid</code> and particles fields in <code>args</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>particles</code>: The container of particles to be moved.</p></li><li><p><code>grid</code>: The grid used for particle movement.</p></li><li><p><code>args</code>: <code>CellArrays</code>s containing particle fields.</p></li></ul>',4)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[118]||(i[118]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/Particles/move_safe.jl#L1-L10",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",G,[e("summary",null,[i[120]||(i[120]=e("a",{id:"JustPIC._3D.particle2centroid!-Tuple{Any, Any, NTuple{N, T} where {N, T}, Particles}",href:"#JustPIC._3D.particle2centroid!-Tuple{Any, Any, NTuple{N, T} where {N, T}, Particles}"},[e("span",{class:"jlbinding"},"JustPIC._3D.particle2centroid!")],-1)),i[121]||(i[121]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[123]||(i[123]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">particle2centroid!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(F, Fp, xci</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, particles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Particles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Interpolates properties <code>Fp</code> from particles to the grid <code>F</code> at center points that are defined by 1D coordinate arrays in <code>xci</code></p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[122]||(i[122]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/Interpolations/particle_to_grid_centroid.jl#L2-L6",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",O,[e("summary",null,[i[124]||(i[124]=e("a",{id:"JustPIC._3D.@idx-Tuple",href:"#JustPIC._3D.@idx-Tuple"},[e("span",{class:"jlbinding"},"JustPIC._3D.@idx")],-1)),i[125]||(i[125]=l()),t(s,{type:"info",class:"jlObjectType jlMacro",text:"Macro"})]),i[127]||(i[127]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@idx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Make a linear range from <code>1</code> to <code>args[i]</code>, with <code>i âˆˆ [1, ..., n]</code></p>',2)),t(s,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[126]||(i[126]=[e("a",{href:"https://github.com/JuliaGeodynamics/JustPIC.jl/blob/v0.5.10/src/Utils.jl#L18-L22",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const Y=o(c,[["render",z]]);export{X as __pageData,Y as default};

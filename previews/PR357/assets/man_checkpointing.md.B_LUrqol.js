import{_ as s,c as a,o as t,aA as e}from"./chunks/framework.BoMdGI0i.js";const c=JSON.parse('{"title":"Checkpointing","description":"","frontmatter":{},"headers":[],"relativePath":"man/checkpointing.md","filePath":"man/checkpointing.md","lastUpdated":null}'),n={name:"man/checkpointing.md"};function l(h,i,p,k,o,d){return t(),a("div",null,[...i[0]||(i[0]=[e(`<h1 id="checkpointing" tabindex="-1">Checkpointing <a class="header-anchor" href="#checkpointing" aria-label="Permalink to &quot;Checkpointing&quot;">​</a></h1><p>It is common to save the state of a simulation at regular intervals, especially for long-running simulations. This allows you to restart the simulation from the last saved state in case of interruptions or to continue the simulation at a later time without losing progress. JustRelax provides a simple way to save and load checkpoint files. Two checkpointing functions are available for the most common file extensions (HDF5 and JLD2). By loading the <code>DataIO</code> module, you gain access to these checkpointing functions as well as VTK saving functions for later visualization with <a href="https://www.paraview.org/" target="_blank" rel="noreferrer">ParaView</a>. For more details on the vtk, see the <a href="./subduction2D/subduction2D">here</a>.</p><p>!!! tip &quot;JustPIC checkpointing&quot; A similar checkpointing function is defined by <a href="https://juliageodynamics.github.io/JustPIC.jl/dev/IO/" target="_blank" rel="noreferrer">JustPIC.jl</a> to save the state of the particles.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-KPPz0" id="tab-k5fuoY2" checked><label data-title="2D module" for="tab-k5fuoY2">2D module</label><input type="radio" name="group-KPPz0" id="tab-FZmIy5i"><label data-title="3D module" for="tab-FZmIy5i">3D module</label></div><div class="blocks"><div class="language-julia vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JustRelax, JustRelax</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JustRelax2D</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JustRelax</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DataIO</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JustRelax, JustRelax</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JustRelax3D</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JustRelax</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DataIO</span></span></code></pre></div></div></div><p>Unless you have a specific reason to use hdf5 files, we recommend using JLD2 files for checkpointing. JLD2 files are generally faster to read and write, and retain the original data types of the variables. However, we made sure to provide both options for maximum flexibility.</p><h3 id="Saving-and-loading-checkpoint-with-HDF5" tabindex="-1">Saving and loading checkpoint with HDF5 <a class="header-anchor" href="#Saving-and-loading-checkpoint-with-HDF5" aria-label="Permalink to &quot;Saving and loading checkpoint with HDF5 {#Saving-and-loading-checkpoint-with-HDF5}&quot;">​</a></h3><p>The HDF5 checkpointing function saves the most important model variables (pressure, temperature, velocity components, viscosity, time, and timestep) to a <code>checkpoint.h5</code> file in your destination folder.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dst </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Your_checkpointing_directory&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">checkpointing_hdf5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dst, stokes, thermal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">T, time, timestep)</span></span></code></pre></div><p>To load the checkpoint, use <code>load_checkpoint_hdf5</code>. This function returns the variables in the same order as saved:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> joinpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dst, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;checkpoint.h5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">P, T, Vx, Vy, Vz, η, t, dt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> load_checkpoint_hdf5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fname)</span></span></code></pre></div><h3 id="Saving-and-loading-checkpoint-with-JLD2" tabindex="-1">Saving and loading checkpoint with JLD2 <a class="header-anchor" href="#Saving-and-loading-checkpoint-with-JLD2" aria-label="Permalink to &quot;Saving and loading checkpoint with JLD2 {#Saving-and-loading-checkpoint-with-JLD2}&quot;">​</a></h3><p>JLD2 checkpointing is recommended for most users due to its speed and ability to preserve Julia data types. In contrast to the HDF5 function, the JLD2 checkpointing function saves all stokes and thermal arrays (optional) while being MPI agnostic. This means that if you run your model with multiple processors, each processor will save its own checkpoint file in the specified directory with MPI rank attached to the name (e.g. <code>checkpoint0000.jld2</code>, <code>checkpoint0001.jld2</code>). The function automatically handles the naming of these files to avoid overwriting. Additionally, you can save any custom fields by passing them as keyword arguments.</p><p>!!! warning &quot;Checkpointing&quot; All checkpointing functions will save the arrays as CPU arrays no matter your backend. This means that if you are using a GPU backend, the arrays will be transferred to the CPU before saving, which may take some time depending on the size of your model.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-XPcPa" id="tab-1GMk0p0" checked><label data-title="Normal use" for="tab-1GMk0p0">Normal use</label><input type="radio" name="group-XPcPa" id="tab-VwChzBb"><label data-title="MPI" for="tab-VwChzBb">MPI</label><input type="radio" name="group-XPcPa" id="tab-hN7hNnh"><label data-title="Additional fields" for="tab-hN7hNnh">Additional fields</label></div><div class="blocks"><div class="language-julia vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dst </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Your_checkpointing_directory&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">checkpointing_jld2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dst, stokes, thermal, time, dt)</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dst </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Your_checkpointing_directory&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">checkpointing_jld2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dst, stokes, thermal, time, dt, igg)</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dst </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Your_checkpointing_directory&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">checkpointing_jld2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(checkpoint, stokes, thermal, t, dt, igg; it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it, custom_field_1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> some_data, custom_field_2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> example_vector)</span></span></code></pre></div></div></div><p>To load the checkpoint, you can use the preexisting <code>load_checkpoint_jld2</code> function or use the <code>JLD2</code> loading function directly. The <code>load_checkpoint_jld2</code> function is MPI agnostic and will automatically load the correct file for each processor based on its rank:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-TNOkC" id="tab-bJbfrZi" checked><label data-title="Normal use" for="tab-bJbfrZi">Normal use</label><input type="radio" name="group-TNOkC" id="tab-1e3wx-G"><label data-title="MPI" for="tab-1e3wx-G">MPI</label></div><div class="blocks"><div class="language-julia vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dst </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Your_checkpointing_directory&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stokes, thermal, t, dt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> load_checkpoint_jld2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dst)</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dst </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Your_checkpointing_directory&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stokes, thermal, t, dt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> load_checkpoint_jld2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dst, igg)</span></span></code></pre></div></div></div><p>If you save additional fields, it is the easiest to load the checkpointing file directly using the <code>JLD2</code> package. This way, you can access all saved variables by their names:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JLD2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> joinpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dst, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;checkpoint000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$(igg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">me)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.jld2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Adjust filename for MPI if needed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JLD2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fname)</span></span></code></pre></div><p>which then returns a dictionary with all your saved variables. You can access them like this:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stokes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stokes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thermal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;thermal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;time&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">custom_field_1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom_field_1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">custom_field_2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom_field_2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># and so on...</span></span></code></pre></div>`,20)])])}const g=s(n,[["render",l]]);export{c as __pageData,g as default};
